{
	"info": {
		"_postman_id": "486e21d2-0307-4e83-b539-4af24ee49350",
		"name": "Explore with me Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35193608"
	},
	"item": [
		{
			"name": "module 1 - stats",
			"item": [
				{
					"name": "Create hit",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"app\": \"ewm-stat-srv\",\n\"uri\": \"/hits\",\n\"ip\": \"192.163.0.1\",\n\"timestamp\": \"2022-09-06 11:00:23\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/hit",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create hit Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.expect(pm.response.code).to.equal(201);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\"app\": \"ewm-stat-srv\",\n\"uri\": \"/hits\",\n\"ip\": \"192.163.0.1\",\n\"timestamp\": \"2024-10-24 15:19:49\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:9090/hit",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"hit"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get stats",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.be.ok;",
									"});",
									"pm.test(\"Response have body\", function () {",
									"    pm.response.to.be.withBody;",
									"    pm.response.to.be.json;",
									"});",
									"",
									"pm.test(\"Наличие поля 'app' в теле ответа\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('app');",
									"    var app = pm.collectionVariables.get(\"app\");",
									"    pm.expect(jsonData.app, '\"app\" must be ' + app).to.eql(Number(app));",
									"});",
									"",
									"pm.test(\"Наличие поля 'uri' в теле ответа\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('uri');",
									"    var uri = pm.collectionVariables.get(\"uri\");",
									"    pm.expect(jsonData.uri, '\"uri\" must be ' + uri).to.eql(Number(uri));",
									"});",
									"",
									"pm.test(\"Наличие поля 'hits' в теле ответа\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('hits');",
									"    var hits = pm.collectionVariables.get(\"hits\");",
									"    pm.expect(jsonData.hits, '\"hits\" must be ' + hits).to.eql(hits);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:9090/stats?start=2022-09-05 11:00:23&end=2022-09-07 11:00:23&uris=/hits&unique=false",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2022-09-05 11:00:23"
								},
								{
									"key": "end",
									"value": "2022-09-07 11:00:23"
								},
								{
									"key": "uris",
									"value": "/hits"
								},
								{
									"key": "unique",
									"value": "false"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get stats with bad request",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.be.badRequest;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:9090/stats?start=2023-09-05T11:00:23&end=2022-09-07T11:00:23&uris=/hits&unique=true",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "2023-09-05T11:00:23"
								},
								{
									"key": "end",
									"value": "2022-09-07T11:00:23"
								},
								{
									"key": "uris",
									"value": "/hits"
								},
								{
									"key": "unique",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get stats with internal server error",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 500\", function () {",
									"    pm.response.to.be.serverError;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "localhost:9090/stats?start=123&end=123&uris=/hits&unique=true",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"stats"
							],
							"query": [
								{
									"key": "start",
									"value": "123"
								},
								{
									"key": "end",
									"value": "123"
								},
								{
									"key": "uris",
									"value": "/hits"
								},
								{
									"key": "unique",
									"value": "true"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "module 2 - main",
			"item": [
				{
					"name": "Users",
					"item": [
						{
							"name": "Create",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"// Check that the response status is 201 Created\r",
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"// Check that response is in JSON format\r",
											"pm.test(\"Response is JSON\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\", /application\\/json/);\r",
											"});\r",
											"\r",
											"// Validate that the response has the necessary fields\r",
											"pm.test(\"Response has user fields\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"name\", \"John Doe\");\r",
											"    pm.expect(jsonData).to.have.property(\"email\", \"johndoe@example.com\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Jane Doe\",\r\n    \"email\": \"johndoe@example.com\"  // Existing email\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:8080/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "8080",
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Categories",
					"item": [
						{
							"name": "Admin",
							"item": [
								{
									"name": "Create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct id\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\", 1);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has correct name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"name\", \"NewName\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"NewName\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/categories",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"NewName\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/categories",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"pm.test(\"Response has correct name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"name\", \"Patch name\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Patch name\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/categories/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Patch Exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"Patch name\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/categories/2",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"packages": {},
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/categories/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 409\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(409);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/admin/categories/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"admin",
												"categories",
												"1"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Public",
							"item": [
								{
									"name": "Content for repository",
									"item": [
										{
											"name": "Create",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct id\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"id\", 1);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct name\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"name\", \"Public\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"packages": {},
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Public\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:8080/admin/categories",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"categories"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(201);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct id\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"id\", 2);\r",
															"});\r",
															"\r",
															"pm.test(\"Response has correct name\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData).to.have.property(\"name\", \"Public2\");\r",
															"});\r",
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"Public2\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "http://localhost:8080/admin/categories",
													"protocol": "http",
													"host": [
														"localhost"
													],
													"port": "8080",
													"path": [
														"admin",
														"categories"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Get By Id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"pm.test(\"Response has correct name\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"name\", \"Public\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/categories/1",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"categories",
												"1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get By Id Exception",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/categories/111",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"categories",
												"111"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get with filters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"pm.test(\"Each item has id and name properties\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.forEach(function (item) {\r",
													"        pm.expect(item).to.have.property(\"id\");\r",
													"        pm.expect(item).to.have.property(\"name\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:8080/categories?from=1&size=10",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "8080",
											"path": [
												"categories"
											],
											"query": [
												{
													"key": "from",
													"value": "1"
												},
												{
													"key": "size",
													"value": "10"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "module 1 - tests",
			"item": []
		}
	]
}