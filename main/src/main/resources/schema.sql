CREATE TABLE IF NOT EXISTS users (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS categories (
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
    name VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE IF NOT EXISTS locations (
     id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
     lat FLOAT NOT NULL,
     lon FLOAT NOT NULL
);

CREATE TABLE If NOT EXISTS events (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
      annotation VARCHAR(2000) NOT NULL,
      category_id INTEGER NOT NULL,
      confirmed_requests INTEGER,
      created_on TIMESTAMP NOT NULL,
      description VARCHAR(7000) NOT NULL,
      event_date TIMESTAMP NOT NULL,
      initiator_id INTEGER NOT NULL,
      location_id INTEGER,
      paid BOOLEAN DEFAULT false,
      participant_limit INTEGER DEFAULT 0,
      published_on TIMESTAMP,
      request_moderation BOOLEAN DEFAULT TRUE,
      state VARCHAR(200) NOT NULL,
      title VARCHAR(120) NOT NULL,
      CONSTRAINT fk_location FOREIGN KEY (location_id) REFERENCES locations(id),
      CONSTRAINT fk_initiator FOREIGN KEY (initiator_id) REFERENCES users(id),
      CONSTRAINT fk_category FOREIGN KEY (category_id) REFERENCES categories(id)
);

CREATE TABLE If NOT EXISTS compilations (
     id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
     pinned BOOLEAN NOT NULL,
     title VARCHAR(50) NOT NULL
);

CREATE TABLE If NOT EXISTS comp_events (
    compilation_id INT NOT NULL REFERENCES compilations(id),
    event_id INT NOT NULL REFERENCES events(id),
    PRIMARY KEY (compilation_id, event_id)
);

CREATE TABLE If NOT EXISTS requests (
      id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY NOT NULL,
      created TIMESTAMP NOT NULL,
      event_id INTEGER NOT NULL,
      requester_id INTEGER NOT NULL,
      status VARCHAR NOT NULL,
      CONSTRAINT fk_event FOREIGN KEY (event_id) REFERENCES events(id),
      CONSTRAINT fk_requester FOREIGN KEY (requester_id) REFERENCES users(id)
);
